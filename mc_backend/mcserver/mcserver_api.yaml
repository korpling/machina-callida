openapi: "3.0.0"

info:
  title: Machina Callida Backend REST API
  version: "1.0"
servers:
  - url: http://localhost:5000/mc/api/v1.0

paths:
  /corpora:
    get:
      summary: Returns a list of corpora.
      operationId: mcserver.app.api.corpusListAPI.get
      responses:
        "200":
          description: Corpus list
          content:
            application/json:
              schema:
                $ref: '../openapi_models.yaml#/components/schemas/Corpus'
      parameters:
        - name: last_update_time
          in: query
          description: Time (in milliseconds) of the last update.
          required: true
          schema:
            type: integer
            example: 123456789
  /corpora/{cid}:
    parameters:
      - name: cid
        in: path
        description: Corpus identifier.
        required: true
        schema:
          type: integer
          example: 1
    delete:
      summary: Deletes a single corpus by ID.
      operationId: mcserver.app.api.corpusAPI.delete
      responses:
        "200":
          description: Indication of success
          content:
            application/json:
              schema:
                type: boolean
                example: true
    get:
      summary: Returns a single corpus by ID.
      operationId: mcserver.app.api.corpusAPI.get
      responses:
        "200":
          description: Corpus object
          content:
            application/json:
              schema:
                $ref: '../openapi_models.yaml#/components/schemas/Corpus'
    patch:
      summary: Updates a single corpus by ID.
      operationId: mcserver.app.api.corpusAPI.patch
      responses:
        "200":
          description: Corpus object
          content:
            application/json:
              schema:
                $ref: '../openapi_models.yaml#/components/schemas/Corpus'
      parameters:
        - name: author
          in: query
          description: Author of the texts in the corpus.
          required: false
          schema:
            type: string
            example: Aulus Gellius
        - name: source_urn
          in: query
          description: CTS base URN for referencing the corpus.
          required: false
          schema:
            type: string
            example: urn:cts:latinLit:phi1254.phi001.perseus-lat2
        - name: title
          in: query
          description: Corpus title.
          required: false
          schema:
            type: string
            example: Noctes Atticae
  /exercise:
    get:
      summary: Returns exercise data by ID.
      operationId: mcserver.app.api.exerciseAPI.get
      responses:
        "200":
          description: Exercise data object, including a graph model for linguistic annotations.
          content:
            application/json:
              schema:
                $ref: '../openapi_models.yaml#/components/schemas/AnnisResponse'
      parameters:
        - $ref: '../openapi_models.yaml#/components/parameters/EidParam'
    post:
      summary: Creates a new exercise.
      operationId: mcserver.app.api.exerciseAPI.post
      responses:
        "200":
          description: Exercise data object
          content:
            application/json:
              schema:
                $ref: '../openapi_models.yaml#/components/schemas/AnnisResponse'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '../openapi_models.yaml#/components/schemas/ExerciseForm'
  /exerciseList:
    get:
      summary: Provides metadata for all available exercises.
      operationId: mcserver.app.api.exerciseListAPI.get
      responses:
        "200":
          description: Data for interactive exercises, excluding the linguistic details.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '../openapi_models.yaml#/components/schemas/MatchingExercise'
      parameters:
        - $ref: '../openapi_models.yaml#/components/parameters/LangParam'
        - name: frequency_upper_bound
          in: query
          description: Upper bound for reference vocabulary frequency.
          required: false
          schema:
            type: integer
            example: 500
            default: 0
        - name: last_update_time
          in: query
          description: Time (in milliseconds) of the last update.
          required: false
          schema:
            type: integer
            example: 123456789
            default: 0
        - name: vocabulary
          in: query
          description: Identifier for a reference vocabulary.
          required: false
          schema:
            $ref: '../openapi_models.yaml#/components/schemas/VocabularyMC'
  /file:
    get:
      summary: Provides the URL to download a specific file.
      operationId: mcserver.app.api.fileAPI.get
      responses:
        "200":
          description: Data for interactive exercises, excluding the linguistic details.
          content:
            application/pdf:
              schema:
                type: object
            application/vnd.openxmlformats-officedocument.wordprocessingml.document:
              schema:
                type: object
            application/xml:
              schema:
                type: object
      parameters:
        - name: id
          in: query
          description: Unique identifier (UUID) for an exercise.
          required: true
          schema:
            type: string
            example: 12345678-1234-5678-1234-567812345678
        - name: type
          in: query
          description: File format for the requested download.
          required: true
          schema:
            $ref: '../openapi_models.yaml#/components/schemas/FileType'
        - $ref: '../openapi_models.yaml#/components/parameters/SolutionIndicesParam'
    post:
      summary: Serializes and persists learning results or HTML content for later access.
      operationId: mcserver.app.api.fileAPI.post
      responses:
        "200":
          description: Indication of success, possibly a reference to the resulting file.
          content:
            application/json:
              schema:
                type: string
                description: Indication of success, or name of the file that was generated.
                example: 12345678-1234-5678-1234-567812345678.pdf
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              description: Data that should be serialized and persisted.
              x-body-name: file_data
              properties:
                file_type:
                  $ref: '../openapi_models.yaml#/components/schemas/FileType'
                html_content:
                  type: string
                  description: HTML content to be serialized.
                  example: <html></html>
                learning_result:
                  type: string
                  description: Serialized XAPI results for an interactive exercise.
                  example: "{'0': {}}"
                urn:
                  type: string
                  description: CTS URN for the text passage from which the HTML content was created.
                  example: urn:cts:latinLit:phi0448.phi001.perseus-lat2:1.1.1-1.1.1
  /frequency:
    get:
      summary: Returns results for a frequency query from ANNIS for a given CTS URN.
      operationId: mcserver.app.api.frequencyAPI.get
      responses:
        "200":
          description: Frequency analysis, i.e. a list of frequency items.
          content:
            application/json:
              schema:
                type: array
                description: List of items with frequency data for linguistic phenomena.
                items:
                  $ref: "../openapi_models.yaml#/components/schemas/FrequencyItem"
      parameters:
        - $ref: '../openapi_models.yaml#/components/parameters/UrnParam'
  /h5p:
    get:
      summary: Provides JSON templates for client-side H5P exercise layouts.
      operationId: mcserver.app.api.h5pAPI.get
      responses:
        "200":
          description: JSON template for an interactive H5P exercise.
          content:
            application/json:
              schema:
                type: object
                description: JSON template for an interactive H5P exercise.
                example: {}
      parameters:
        - $ref: '../openapi_models.yaml#/components/parameters/EidParam'
        - $ref: '../openapi_models.yaml#/components/parameters/LangParam'
        - $ref: '../openapi_models.yaml#/components/parameters/SolutionIndicesParam'
  /kwic:
    post:
      summary: Provides example contexts for a given phenomenon in a given corpus.
      operationId: mcserver.app.api.kwicAPI.post
      responses:
        "200":
          description: HTML strings with SVG elements for rendering KWIC images.
          content:
            application/json:
              schema:
                type: string
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '../openapi_models.yaml#/components/schemas/KwicForm'
  /rawtext:
    get:
      summary: Provides the raw text for a requested text passage.
      operationId: mcserver.app.api.rawTextAPI.get
      responses:
        "200":
          description: Graph data for the text passage, including raw text and annotations.
          content:
            application/json:
              schema:
                $ref: '../openapi_models.yaml#/components/schemas/AnnisResponse'
      parameters:
        - $ref: '../openapi_models.yaml#/components/parameters/UrnParam'
  /staticExercises:
    get:
      summary: Returns metadata for static exercises.
      operationId: mcserver.app.api.staticExercisesAPI.get
      responses:
        "200":
          description: Metadata for static exercises, mapped to their respective URIs in the frontend.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '../openapi_models.yaml#/components/schemas/StaticExercise'
  /textcomplexity:
    get:
      summary: Gives users measures of text complexity for a given text.
      operationId: mcserver.app.api.textcomplexityAPI.get
      responses:
        "200":
          description: Text complexity measures for a given text.
          content:
            application/json:
              schema:
                $ref: '../openapi_models.yaml#/components/schemas/TextComplexity'
      parameters:
        - name: measure
          in: query
          description: The desired measure of text complexity for the given text passage.
          required: true
          schema:
            type: string
            example: all
        - $ref: '../openapi_models.yaml#/components/parameters/UrnParam'
  /validReff:
    get:
      summary: Gives users all the citable text references for a corpus.
      operationId: mcserver.app.api.validReffAPI.get
      responses:
        "200":
          description: Valid references for the desired text.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: urn:custom:latinLit:proiel.caes-gal.lat:1.1.1
      parameters:
        - $ref: '../openapi_models.yaml#/components/parameters/UrnParam'
  /vectorNetwork:
    get:
      summary: Provides network data for the vectors in an AI model.
      operationId: mcserver.app.api.vectorNetworkAPI.get
      responses:
        "200":
          description: HTML string with SVG elements for rendering the network graph.
          content:
            application/json:
              schema:
                type: string
      parameters:
        - name: search_regex
          in: query
          description: Regular expression to determine relevant words in the text.
          required: true
          schema:
            $ref: '../openapi_models.yaml#/components/schemas/SearchRegex'
        - name: highlight_regex
          in: query
          description: Regular expression to determine words in the text that should be highlighted.
          required: false
          schema:
            type: string
            example: ver[aoe]
            default: ""
        - name: min_count
          in: query
          description: Minimum number of occurrences that a word needs to be included in the analysis.
          required: false
          schema:
            type: integer
            example: 3
            default: 1
        - name: nearest_neighbor_count
          in: query
          description: Number of nearest neighbors that should be considered for each relevant word.
          required: false
          schema:
            $ref: '../openapi_models.yaml#/components/schemas/NearestNeighborCount'
    post:
      summary: Provides network data for the vectors in an AI model.
      operationId: mcserver.app.api.vectorNetworkAPI.post
      responses:
        "200":
          description: Sentences whose content is similar to a given word.
          content:
            application/json:
              schema:
                type: array
                description: List of tokenized sentences.
                items:
                  type: array
                  description: Tokenized sentence.
                  example: [in, vino, veritas]
                  items:
                    type: string
                    description: Token of a sentence.
                    example: veritas
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '../openapi_models.yaml#/components/schemas/VectorNetworkForm'
  /vocabulary:
    get:
      summary: Shows how well the vocabulary of a text matches a predefined reference vocabulary.
      operationId: mcserver.app.api.vocabularyAPI.get
      responses:
        "200":
          description: Retrieves sentence ID and matching degree for each sentence in the query text.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '../openapi_models.yaml#/components/schemas/Sentence'
      parameters:
        - name: frequency_upper_bound
          in: query
          description: Upper bound for reference vocabulary frequency.
          required: true
          schema:
            type: integer
            example: 500
        - name: query_urn
          in: query
          description: URN for the query corpus.
          required: true
          schema:
            type: string
            example: urn:cts:latinLit:phi0448.phi001.perseus-lat2:1.1.1-1.1.1
        - name: vocabulary
          in: query
          description: Identifier for a reference vocabulary.
          required: true
          schema:
            $ref: '../openapi_models.yaml#/components/schemas/VocabularyMC'
    post:
      summary: Shows how well the vocabulary of a text matches a predefined reference vocabulary.
      operationId: mcserver.app.api.vocabularyAPI.post
      responses:
        "200":
          description: Indicates for each token of a corpus whether it is covered by a reference vocabulary.
          content:
            application/json:
              schema:
                $ref: '../openapi_models.yaml#/components/schemas/AnnisResponse'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '../openapi_models.yaml#/components/schemas/VocabularyForm'
# include this here so the data model gets generated correctly
components:
  schemas:
    TextComplexityFormExtension:
      type: object
      allOf:
        - $ref: '../openapi_models.yaml#/components/schemas/TextComplexityForm'
