# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi.openapi_server.models.base_model_ import Model
from openapi.openapi_server.models.frequency_item import FrequencyItem
from openapi.openapi_server.models.graph_data import GraphData
from openapi.openapi_server.models.solution import Solution
from openapi.openapi_server.models.text_complexity import TextComplexity
from openapi.openapi_server import util

from openapi.openapi_server.models.frequency_item import FrequencyItem  # noqa: E501
from openapi.openapi_server.models.graph_data import GraphData  # noqa: E501
from openapi.openapi_server.models.solution import Solution  # noqa: E501
from openapi.openapi_server.models.text_complexity import TextComplexity  # noqa: E501

class AnnisResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exercise_id=None, exercise_type=None, frequency_analysis=None, graph_data=None, solutions=None, text_complexity=None, uri=None):  # noqa: E501
        """AnnisResponse - a model defined in OpenAPI

        :param exercise_id: The exercise_id of this AnnisResponse.  # noqa: E501
        :type exercise_id: str
        :param exercise_type: The exercise_type of this AnnisResponse.  # noqa: E501
        :type exercise_type: str
        :param frequency_analysis: The frequency_analysis of this AnnisResponse.  # noqa: E501
        :type frequency_analysis: List[FrequencyItem]
        :param graph_data: The graph_data of this AnnisResponse.  # noqa: E501
        :type graph_data: GraphData
        :param solutions: The solutions of this AnnisResponse.  # noqa: E501
        :type solutions: List[Solution]
        :param text_complexity: The text_complexity of this AnnisResponse.  # noqa: E501
        :type text_complexity: TextComplexity
        :param uri: The uri of this AnnisResponse.  # noqa: E501
        :type uri: str
        """
        self.openapi_types = {
            'exercise_id': str,
            'exercise_type': str,
            'frequency_analysis': List[FrequencyItem],
            'graph_data': GraphData,
            'solutions': List[Solution],
            'text_complexity': TextComplexity,
            'uri': str
        }

        self.attribute_map = {
            'exercise_id': 'exercise_id',
            'exercise_type': 'exercise_type',
            'frequency_analysis': 'frequency_analysis',
            'graph_data': 'graph_data',
            'solutions': 'solutions',
            'text_complexity': 'text_complexity',
            'uri': 'uri'
        }

        self._exercise_id = exercise_id
        self._exercise_type = exercise_type
        self._frequency_analysis = frequency_analysis
        self._graph_data = graph_data
        self._solutions = solutions
        self._text_complexity = text_complexity
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt) -> 'AnnisResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AnnisResponse of this AnnisResponse.  # noqa: E501
        :rtype: AnnisResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exercise_id(self):
        """Gets the exercise_id of this AnnisResponse.

        Unique identifier (UUID) for the exercise.  # noqa: E501

        :return: The exercise_id of this AnnisResponse.
        :rtype: str
        """
        return self._exercise_id

    @exercise_id.setter
    def exercise_id(self, exercise_id):
        """Sets the exercise_id of this AnnisResponse.

        Unique identifier (UUID) for the exercise.  # noqa: E501

        :param exercise_id: The exercise_id of this AnnisResponse.
        :type exercise_id: str
        """

        self._exercise_id = exercise_id

    @property
    def exercise_type(self):
        """Gets the exercise_type of this AnnisResponse.

        Type of exercise, concerning interaction and layout.  # noqa: E501

        :return: The exercise_type of this AnnisResponse.
        :rtype: str
        """
        return self._exercise_type

    @exercise_type.setter
    def exercise_type(self, exercise_type):
        """Sets the exercise_type of this AnnisResponse.

        Type of exercise, concerning interaction and layout.  # noqa: E501

        :param exercise_type: The exercise_type of this AnnisResponse.
        :type exercise_type: str
        """

        self._exercise_type = exercise_type

    @property
    def frequency_analysis(self):
        """Gets the frequency_analysis of this AnnisResponse.

        List of items with frequency data for linguistic phenomena.  # noqa: E501

        :return: The frequency_analysis of this AnnisResponse.
        :rtype: List[FrequencyItem]
        """
        return self._frequency_analysis

    @frequency_analysis.setter
    def frequency_analysis(self, frequency_analysis):
        """Sets the frequency_analysis of this AnnisResponse.

        List of items with frequency data for linguistic phenomena.  # noqa: E501

        :param frequency_analysis: The frequency_analysis of this AnnisResponse.
        :type frequency_analysis: List[FrequencyItem]
        """

        self._frequency_analysis = frequency_analysis

    @property
    def graph_data(self):
        """Gets the graph_data of this AnnisResponse.


        :return: The graph_data of this AnnisResponse.
        :rtype: GraphData
        """
        return self._graph_data

    @graph_data.setter
    def graph_data(self, graph_data):
        """Sets the graph_data of this AnnisResponse.


        :param graph_data: The graph_data of this AnnisResponse.
        :type graph_data: GraphData
        """

        self._graph_data = graph_data

    @property
    def solutions(self):
        """Gets the solutions of this AnnisResponse.

        Correct solutions for this exercise.  # noqa: E501

        :return: The solutions of this AnnisResponse.
        :rtype: List[Solution]
        """
        return self._solutions

    @solutions.setter
    def solutions(self, solutions):
        """Sets the solutions of this AnnisResponse.

        Correct solutions for this exercise.  # noqa: E501

        :param solutions: The solutions of this AnnisResponse.
        :type solutions: List[Solution]
        """

        self._solutions = solutions

    @property
    def text_complexity(self):
        """Gets the text_complexity of this AnnisResponse.


        :return: The text_complexity of this AnnisResponse.
        :rtype: TextComplexity
        """
        return self._text_complexity

    @text_complexity.setter
    def text_complexity(self, text_complexity):
        """Sets the text_complexity of this AnnisResponse.


        :param text_complexity: The text_complexity of this AnnisResponse.
        :type text_complexity: TextComplexity
        """

        self._text_complexity = text_complexity

    @property
    def uri(self):
        """Gets the uri of this AnnisResponse.

        URI for accessing the exercise in this API.  # noqa: E501

        :return: The uri of this AnnisResponse.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this AnnisResponse.

        URI for accessing the exercise in this API.  # noqa: E501

        :param uri: The uri of this AnnisResponse.
        :type uri: str
        """

        self._uri = uri
