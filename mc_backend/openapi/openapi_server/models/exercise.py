# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi.openapi_server.models.base_model_ import Model
from openapi.openapi_server.models.exercise_all_of import ExerciseAllOf
from openapi.openapi_server.models.exercise_base import ExerciseBase
from openapi.openapi_server import util

from openapi.openapi_server.models.exercise_all_of import ExerciseAllOf  # noqa: E501
from openapi.openapi_server.models.exercise_base import ExerciseBase  # noqa: E501

class Exercise(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, correct_feedback='', general_feedback='', incorrect_feedback='', instructions='', partially_correct_feedback='', search_values='[]', work_author='', work_title='', conll='', eid=None, exercise_type='', exercise_type_translation='', language='de', last_access_time=None, solutions='[]', text_complexity=0, urn=''):  # noqa: E501
        """Exercise - a model defined in OpenAPI

        :param correct_feedback: The correct_feedback of this Exercise.  # noqa: E501
        :type correct_feedback: str
        :param general_feedback: The general_feedback of this Exercise.  # noqa: E501
        :type general_feedback: str
        :param incorrect_feedback: The incorrect_feedback of this Exercise.  # noqa: E501
        :type incorrect_feedback: str
        :param instructions: The instructions of this Exercise.  # noqa: E501
        :type instructions: str
        :param partially_correct_feedback: The partially_correct_feedback of this Exercise.  # noqa: E501
        :type partially_correct_feedback: str
        :param search_values: The search_values of this Exercise.  # noqa: E501
        :type search_values: str
        :param work_author: The work_author of this Exercise.  # noqa: E501
        :type work_author: str
        :param work_title: The work_title of this Exercise.  # noqa: E501
        :type work_title: str
        :param conll: The conll of this Exercise.  # noqa: E501
        :type conll: str
        :param eid: The eid of this Exercise.  # noqa: E501
        :type eid: str
        :param exercise_type: The exercise_type of this Exercise.  # noqa: E501
        :type exercise_type: str
        :param exercise_type_translation: The exercise_type_translation of this Exercise.  # noqa: E501
        :type exercise_type_translation: str
        :param language: The language of this Exercise.  # noqa: E501
        :type language: str
        :param last_access_time: The last_access_time of this Exercise.  # noqa: E501
        :type last_access_time: float
        :param solutions: The solutions of this Exercise.  # noqa: E501
        :type solutions: str
        :param text_complexity: The text_complexity of this Exercise.  # noqa: E501
        :type text_complexity: float
        :param urn: The urn of this Exercise.  # noqa: E501
        :type urn: str
        """
        self.openapi_types = {
            'correct_feedback': str,
            'general_feedback': str,
            'incorrect_feedback': str,
            'instructions': str,
            'partially_correct_feedback': str,
            'search_values': str,
            'work_author': str,
            'work_title': str,
            'conll': str,
            'eid': str,
            'exercise_type': str,
            'exercise_type_translation': str,
            'language': str,
            'last_access_time': float,
            'solutions': str,
            'text_complexity': float,
            'urn': str
        }

        self.attribute_map = {
            'correct_feedback': 'correct_feedback',
            'general_feedback': 'general_feedback',
            'incorrect_feedback': 'incorrect_feedback',
            'instructions': 'instructions',
            'partially_correct_feedback': 'partially_correct_feedback',
            'search_values': 'search_values',
            'work_author': 'work_author',
            'work_title': 'work_title',
            'conll': 'conll',
            'eid': 'eid',
            'exercise_type': 'exercise_type',
            'exercise_type_translation': 'exercise_type_translation',
            'language': 'language',
            'last_access_time': 'last_access_time',
            'solutions': 'solutions',
            'text_complexity': 'text_complexity',
            'urn': 'urn'
        }

        self._correct_feedback = correct_feedback
        self._general_feedback = general_feedback
        self._incorrect_feedback = incorrect_feedback
        self._instructions = instructions
        self._partially_correct_feedback = partially_correct_feedback
        self._search_values = search_values
        self._work_author = work_author
        self._work_title = work_title
        self._conll = conll
        self._eid = eid
        self._exercise_type = exercise_type
        self._exercise_type_translation = exercise_type_translation
        self._language = language
        self._last_access_time = last_access_time
        self._solutions = solutions
        self._text_complexity = text_complexity
        self._urn = urn

    @classmethod
    def from_dict(cls, dikt) -> 'Exercise':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Exercise of this Exercise.  # noqa: E501
        :rtype: Exercise
        """
        return util.deserialize_model(dikt, cls)

    @property
    def correct_feedback(self):
        """Gets the correct_feedback of this Exercise.

        Feedback for successful completion of the exercise.  # noqa: E501

        :return: The correct_feedback of this Exercise.
        :rtype: str
        """
        return self._correct_feedback

    @correct_feedback.setter
    def correct_feedback(self, correct_feedback):
        """Sets the correct_feedback of this Exercise.

        Feedback for successful completion of the exercise.  # noqa: E501

        :param correct_feedback: The correct_feedback of this Exercise.
        :type correct_feedback: str
        """

        self._correct_feedback = correct_feedback

    @property
    def general_feedback(self):
        """Gets the general_feedback of this Exercise.

        Feedback for finishing the exercise.  # noqa: E501

        :return: The general_feedback of this Exercise.
        :rtype: str
        """
        return self._general_feedback

    @general_feedback.setter
    def general_feedback(self, general_feedback):
        """Sets the general_feedback of this Exercise.

        Feedback for finishing the exercise.  # noqa: E501

        :param general_feedback: The general_feedback of this Exercise.
        :type general_feedback: str
        """

        self._general_feedback = general_feedback

    @property
    def incorrect_feedback(self):
        """Gets the incorrect_feedback of this Exercise.

        Feedback for failing to complete the exercise successfully.  # noqa: E501

        :return: The incorrect_feedback of this Exercise.
        :rtype: str
        """
        return self._incorrect_feedback

    @incorrect_feedback.setter
    def incorrect_feedback(self, incorrect_feedback):
        """Sets the incorrect_feedback of this Exercise.

        Feedback for failing to complete the exercise successfully.  # noqa: E501

        :param incorrect_feedback: The incorrect_feedback of this Exercise.
        :type incorrect_feedback: str
        """

        self._incorrect_feedback = incorrect_feedback

    @property
    def instructions(self):
        """Gets the instructions of this Exercise.

        Hints for how to complete the exercise.  # noqa: E501

        :return: The instructions of this Exercise.
        :rtype: str
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this Exercise.

        Hints for how to complete the exercise.  # noqa: E501

        :param instructions: The instructions of this Exercise.
        :type instructions: str
        """
        if instructions is None:
            raise ValueError("Invalid value for `instructions`, must not be `None`")  # noqa: E501

        self._instructions = instructions

    @property
    def partially_correct_feedback(self):
        """Gets the partially_correct_feedback of this Exercise.

        Feedback for successfully completing certain parts of the exercise.  # noqa: E501

        :return: The partially_correct_feedback of this Exercise.
        :rtype: str
        """
        return self._partially_correct_feedback

    @partially_correct_feedback.setter
    def partially_correct_feedback(self, partially_correct_feedback):
        """Sets the partially_correct_feedback of this Exercise.

        Feedback for successfully completing certain parts of the exercise.  # noqa: E501

        :param partially_correct_feedback: The partially_correct_feedback of this Exercise.
        :type partially_correct_feedback: str
        """

        self._partially_correct_feedback = partially_correct_feedback

    @property
    def search_values(self):
        """Gets the search_values of this Exercise.

        Search queries that were used to build the exercise.  # noqa: E501

        :return: The search_values of this Exercise.
        :rtype: str
        """
        return self._search_values

    @search_values.setter
    def search_values(self, search_values):
        """Sets the search_values of this Exercise.

        Search queries that were used to build the exercise.  # noqa: E501

        :param search_values: The search_values of this Exercise.
        :type search_values: str
        """
        if search_values is None:
            raise ValueError("Invalid value for `search_values`, must not be `None`")  # noqa: E501

        self._search_values = search_values

    @property
    def work_author(self):
        """Gets the work_author of this Exercise.

        Name of the person who wrote the base text for the exercise.  # noqa: E501

        :return: The work_author of this Exercise.
        :rtype: str
        """
        return self._work_author

    @work_author.setter
    def work_author(self, work_author):
        """Sets the work_author of this Exercise.

        Name of the person who wrote the base text for the exercise.  # noqa: E501

        :param work_author: The work_author of this Exercise.
        :type work_author: str
        """

        self._work_author = work_author

    @property
    def work_title(self):
        """Gets the work_title of this Exercise.

        Title of the base text for the exercise.  # noqa: E501

        :return: The work_title of this Exercise.
        :rtype: str
        """
        return self._work_title

    @work_title.setter
    def work_title(self, work_title):
        """Sets the work_title of this Exercise.

        Title of the base text for the exercise.  # noqa: E501

        :param work_title: The work_title of this Exercise.
        :type work_title: str
        """

        self._work_title = work_title

    @property
    def conll(self):
        """Gets the conll of this Exercise.

        CONLL-formatted linguistic annotations represented as a single string.  # noqa: E501

        :return: The conll of this Exercise.
        :rtype: str
        """
        return self._conll

    @conll.setter
    def conll(self, conll):
        """Sets the conll of this Exercise.

        CONLL-formatted linguistic annotations represented as a single string.  # noqa: E501

        :param conll: The conll of this Exercise.
        :type conll: str
        """

        self._conll = conll

    @property
    def eid(self):
        """Gets the eid of this Exercise.

        Unique identifier (UUID) for the exercise.  # noqa: E501

        :return: The eid of this Exercise.
        :rtype: str
        """
        return self._eid

    @eid.setter
    def eid(self, eid):
        """Sets the eid of this Exercise.

        Unique identifier (UUID) for the exercise.  # noqa: E501

        :param eid: The eid of this Exercise.
        :type eid: str
        """
        if eid is None:
            raise ValueError("Invalid value for `eid`, must not be `None`")  # noqa: E501

        self._eid = eid

    @property
    def exercise_type(self):
        """Gets the exercise_type of this Exercise.

        Type of exercise, concerning interaction and layout.  # noqa: E501

        :return: The exercise_type of this Exercise.
        :rtype: str
        """
        return self._exercise_type

    @exercise_type.setter
    def exercise_type(self, exercise_type):
        """Sets the exercise_type of this Exercise.

        Type of exercise, concerning interaction and layout.  # noqa: E501

        :param exercise_type: The exercise_type of this Exercise.
        :type exercise_type: str
        """

        self._exercise_type = exercise_type

    @property
    def exercise_type_translation(self):
        """Gets the exercise_type_translation of this Exercise.

        Localized expression of the exercise type.  # noqa: E501

        :return: The exercise_type_translation of this Exercise.
        :rtype: str
        """
        return self._exercise_type_translation

    @exercise_type_translation.setter
    def exercise_type_translation(self, exercise_type_translation):
        """Sets the exercise_type_translation of this Exercise.

        Localized expression of the exercise type.  # noqa: E501

        :param exercise_type_translation: The exercise_type_translation of this Exercise.
        :type exercise_type_translation: str
        """

        self._exercise_type_translation = exercise_type_translation

    @property
    def language(self):
        """Gets the language of this Exercise.

        ISO 639-1 Language Code for the localization of exercise content.  # noqa: E501

        :return: The language of this Exercise.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Exercise.

        ISO 639-1 Language Code for the localization of exercise content.  # noqa: E501

        :param language: The language of this Exercise.
        :type language: str
        """

        self._language = language

    @property
    def last_access_time(self):
        """Gets the last_access_time of this Exercise.

        When the exercise was last accessed (as POSIX timestamp).  # noqa: E501

        :return: The last_access_time of this Exercise.
        :rtype: float
        """
        return self._last_access_time

    @last_access_time.setter
    def last_access_time(self, last_access_time):
        """Sets the last_access_time of this Exercise.

        When the exercise was last accessed (as POSIX timestamp).  # noqa: E501

        :param last_access_time: The last_access_time of this Exercise.
        :type last_access_time: float
        """
        if last_access_time is None:
            raise ValueError("Invalid value for `last_access_time`, must not be `None`")  # noqa: E501

        self._last_access_time = last_access_time

    @property
    def solutions(self):
        """Gets the solutions of this Exercise.

        Correct solutions for the exercise.  # noqa: E501

        :return: The solutions of this Exercise.
        :rtype: str
        """
        return self._solutions

    @solutions.setter
    def solutions(self, solutions):
        """Sets the solutions of this Exercise.

        Correct solutions for the exercise.  # noqa: E501

        :param solutions: The solutions of this Exercise.
        :type solutions: str
        """

        self._solutions = solutions

    @property
    def text_complexity(self):
        """Gets the text_complexity of this Exercise.

        Overall text complexity as measured by the software's internal language analysis.  # noqa: E501

        :return: The text_complexity of this Exercise.
        :rtype: float
        """
        return self._text_complexity

    @text_complexity.setter
    def text_complexity(self, text_complexity):
        """Sets the text_complexity of this Exercise.

        Overall text complexity as measured by the software's internal language analysis.  # noqa: E501

        :param text_complexity: The text_complexity of this Exercise.
        :type text_complexity: float
        """

        self._text_complexity = text_complexity

    @property
    def urn(self):
        """Gets the urn of this Exercise.

        CTS URN for the text passage from which the exercise was created.  # noqa: E501

        :return: The urn of this Exercise.
        :rtype: str
        """
        return self._urn

    @urn.setter
    def urn(self, urn):
        """Sets the urn of this Exercise.

        CTS URN for the text passage from which the exercise was created.  # noqa: E501

        :param urn: The urn of this Exercise.
        :type urn: str
        """

        self._urn = urn
