# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi.openapi_server.models.base_model_ import Model
from openapi.openapi_server import util


class ExerciseAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conll='', eid=None, exercise_type='', exercise_type_translation='', last_access_time=None, solutions='[]', text_complexity=0, urn=''):  # noqa: E501
        """ExerciseAllOf - a model defined in OpenAPI

        :param conll: The conll of this ExerciseAllOf.  # noqa: E501
        :type conll: str
        :param eid: The eid of this ExerciseAllOf.  # noqa: E501
        :type eid: str
        :param exercise_type: The exercise_type of this ExerciseAllOf.  # noqa: E501
        :type exercise_type: str
        :param exercise_type_translation: The exercise_type_translation of this ExerciseAllOf.  # noqa: E501
        :type exercise_type_translation: str
        :param last_access_time: The last_access_time of this ExerciseAllOf.  # noqa: E501
        :type last_access_time: float
        :param solutions: The solutions of this ExerciseAllOf.  # noqa: E501
        :type solutions: str
        :param text_complexity: The text_complexity of this ExerciseAllOf.  # noqa: E501
        :type text_complexity: float
        :param urn: The urn of this ExerciseAllOf.  # noqa: E501
        :type urn: str
        """
        self.openapi_types = {
            'conll': str,
            'eid': str,
            'exercise_type': str,
            'exercise_type_translation': str,
            'last_access_time': float,
            'solutions': str,
            'text_complexity': float,
            'urn': str
        }

        self.attribute_map = {
            'conll': 'conll',
            'eid': 'eid',
            'exercise_type': 'exercise_type',
            'exercise_type_translation': 'exercise_type_translation',
            'last_access_time': 'last_access_time',
            'solutions': 'solutions',
            'text_complexity': 'text_complexity',
            'urn': 'urn'
        }

        self._conll = conll
        self._eid = eid
        self._exercise_type = exercise_type
        self._exercise_type_translation = exercise_type_translation
        self._last_access_time = last_access_time
        self._solutions = solutions
        self._text_complexity = text_complexity
        self._urn = urn

    @classmethod
    def from_dict(cls, dikt) -> 'ExerciseAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Exercise_allOf of this ExerciseAllOf.  # noqa: E501
        :rtype: ExerciseAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conll(self):
        """Gets the conll of this ExerciseAllOf.

        CONLL-formatted linguistic annotations represented as a single string.  # noqa: E501

        :return: The conll of this ExerciseAllOf.
        :rtype: str
        """
        return self._conll

    @conll.setter
    def conll(self, conll):
        """Sets the conll of this ExerciseAllOf.

        CONLL-formatted linguistic annotations represented as a single string.  # noqa: E501

        :param conll: The conll of this ExerciseAllOf.
        :type conll: str
        """

        self._conll = conll

    @property
    def eid(self):
        """Gets the eid of this ExerciseAllOf.

        Unique identifier (UUID) for the exercise.  # noqa: E501

        :return: The eid of this ExerciseAllOf.
        :rtype: str
        """
        return self._eid

    @eid.setter
    def eid(self, eid):
        """Sets the eid of this ExerciseAllOf.

        Unique identifier (UUID) for the exercise.  # noqa: E501

        :param eid: The eid of this ExerciseAllOf.
        :type eid: str
        """
        if eid is None:
            raise ValueError("Invalid value for `eid`, must not be `None`")  # noqa: E501

        self._eid = eid

    @property
    def exercise_type(self):
        """Gets the exercise_type of this ExerciseAllOf.

        Type of exercise, concerning interaction and layout.  # noqa: E501

        :return: The exercise_type of this ExerciseAllOf.
        :rtype: str
        """
        return self._exercise_type

    @exercise_type.setter
    def exercise_type(self, exercise_type):
        """Sets the exercise_type of this ExerciseAllOf.

        Type of exercise, concerning interaction and layout.  # noqa: E501

        :param exercise_type: The exercise_type of this ExerciseAllOf.
        :type exercise_type: str
        """

        self._exercise_type = exercise_type

    @property
    def exercise_type_translation(self):
        """Gets the exercise_type_translation of this ExerciseAllOf.

        Localized expression of the exercise type.  # noqa: E501

        :return: The exercise_type_translation of this ExerciseAllOf.
        :rtype: str
        """
        return self._exercise_type_translation

    @exercise_type_translation.setter
    def exercise_type_translation(self, exercise_type_translation):
        """Sets the exercise_type_translation of this ExerciseAllOf.

        Localized expression of the exercise type.  # noqa: E501

        :param exercise_type_translation: The exercise_type_translation of this ExerciseAllOf.
        :type exercise_type_translation: str
        """

        self._exercise_type_translation = exercise_type_translation

    @property
    def last_access_time(self):
        """Gets the last_access_time of this ExerciseAllOf.

        When the exercise was last accessed (as POSIX timestamp).  # noqa: E501

        :return: The last_access_time of this ExerciseAllOf.
        :rtype: float
        """
        return self._last_access_time

    @last_access_time.setter
    def last_access_time(self, last_access_time):
        """Sets the last_access_time of this ExerciseAllOf.

        When the exercise was last accessed (as POSIX timestamp).  # noqa: E501

        :param last_access_time: The last_access_time of this ExerciseAllOf.
        :type last_access_time: float
        """
        if last_access_time is None:
            raise ValueError("Invalid value for `last_access_time`, must not be `None`")  # noqa: E501

        self._last_access_time = last_access_time

    @property
    def solutions(self):
        """Gets the solutions of this ExerciseAllOf.

        Correct solutions for the exercise.  # noqa: E501

        :return: The solutions of this ExerciseAllOf.
        :rtype: str
        """
        return self._solutions

    @solutions.setter
    def solutions(self, solutions):
        """Sets the solutions of this ExerciseAllOf.

        Correct solutions for the exercise.  # noqa: E501

        :param solutions: The solutions of this ExerciseAllOf.
        :type solutions: str
        """

        self._solutions = solutions

    @property
    def text_complexity(self):
        """Gets the text_complexity of this ExerciseAllOf.

        Overall text complexity as measured by the software's internal language analysis.  # noqa: E501

        :return: The text_complexity of this ExerciseAllOf.
        :rtype: float
        """
        return self._text_complexity

    @text_complexity.setter
    def text_complexity(self, text_complexity):
        """Sets the text_complexity of this ExerciseAllOf.

        Overall text complexity as measured by the software's internal language analysis.  # noqa: E501

        :param text_complexity: The text_complexity of this ExerciseAllOf.
        :type text_complexity: float
        """

        self._text_complexity = text_complexity

    @property
    def urn(self):
        """Gets the urn of this ExerciseAllOf.

        CTS URN for the text passage from which the exercise was created.  # noqa: E501

        :return: The urn of this ExerciseAllOf.
        :rtype: str
        """
        return self._urn

    @urn.setter
    def urn(self, urn):
        """Sets the urn of this ExerciseAllOf.

        CTS URN for the text passage from which the exercise was created.  # noqa: E501

        :param urn: The urn of this ExerciseAllOf.
        :type urn: str
        """

        self._urn = urn
