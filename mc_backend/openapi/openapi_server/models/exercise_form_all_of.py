# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi.openapi_server.models.base_model_ import Model
from openapi.openapi_server import util


class ExerciseFormAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, type_translation='', urn=None):  # noqa: E501
        """ExerciseFormAllOf - a model defined in OpenAPI

        :param type: The type of this ExerciseFormAllOf.  # noqa: E501
        :type type: str
        :param type_translation: The type_translation of this ExerciseFormAllOf.  # noqa: E501
        :type type_translation: str
        :param urn: The urn of this ExerciseFormAllOf.  # noqa: E501
        :type urn: str
        """
        self.openapi_types = {
            'type': str,
            'type_translation': str,
            'urn': str
        }

        self.attribute_map = {
            'type': 'type',
            'type_translation': 'type_translation',
            'urn': 'urn'
        }

        self._type = type
        self._type_translation = type_translation
        self._urn = urn

    @classmethod
    def from_dict(cls, dikt) -> 'ExerciseFormAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ExerciseForm_allOf of this ExerciseFormAllOf.  # noqa: E501
        :rtype: ExerciseFormAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this ExerciseFormAllOf.

        Type of exercise, concerning interaction and layout.  # noqa: E501

        :return: The type of this ExerciseFormAllOf.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ExerciseFormAllOf.

        Type of exercise, concerning interaction and layout.  # noqa: E501

        :param type: The type of this ExerciseFormAllOf.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def type_translation(self):
        """Gets the type_translation of this ExerciseFormAllOf.

        Localized expression of the exercise type.  # noqa: E501

        :return: The type_translation of this ExerciseFormAllOf.
        :rtype: str
        """
        return self._type_translation

    @type_translation.setter
    def type_translation(self, type_translation):
        """Sets the type_translation of this ExerciseFormAllOf.

        Localized expression of the exercise type.  # noqa: E501

        :param type_translation: The type_translation of this ExerciseFormAllOf.
        :type type_translation: str
        """

        self._type_translation = type_translation

    @property
    def urn(self):
        """Gets the urn of this ExerciseFormAllOf.

        CTS URN for the text passage from which the exercise was created.  # noqa: E501

        :return: The urn of this ExerciseFormAllOf.
        :rtype: str
        """
        return self._urn

    @urn.setter
    def urn(self, urn):
        """Sets the urn of this ExerciseFormAllOf.

        CTS URN for the text passage from which the exercise was created.  # noqa: E501

        :param urn: The urn of this ExerciseFormAllOf.
        :type urn: str
        """
        if urn is None:
            raise ValueError("Invalid value for `urn`, must not be `None`")  # noqa: E501

        self._urn = urn
