# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi.openapi_server.models.base_model_ import Model
from openapi.openapi_server.models.link import Link
from openapi.openapi_server.models.node_mc import NodeMC
from openapi.openapi_server import util

from openapi.openapi_server.models.link import Link  # noqa: E501
from openapi.openapi_server.models.node_mc import NodeMC  # noqa: E501

class GraphData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, directed=None, graph=None, links=None, multigraph=None, nodes=None):  # noqa: E501
        """GraphData - a model defined in OpenAPI

        :param directed: The directed of this GraphData.  # noqa: E501
        :type directed: bool
        :param graph: The graph of this GraphData.  # noqa: E501
        :type graph: object
        :param links: The links of this GraphData.  # noqa: E501
        :type links: List[Link]
        :param multigraph: The multigraph of this GraphData.  # noqa: E501
        :type multigraph: bool
        :param nodes: The nodes of this GraphData.  # noqa: E501
        :type nodes: List[NodeMC]
        """
        self.openapi_types = {
            'directed': bool,
            'graph': object,
            'links': List[Link],
            'multigraph': bool,
            'nodes': List[NodeMC]
        }

        self.attribute_map = {
            'directed': 'directed',
            'graph': 'graph',
            'links': 'links',
            'multigraph': 'multigraph',
            'nodes': 'nodes'
        }

        self._directed = directed
        self._graph = graph
        self._links = links
        self._multigraph = multigraph
        self._nodes = nodes

    @classmethod
    def from_dict(cls, dikt) -> 'GraphData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GraphData of this GraphData.  # noqa: E501
        :rtype: GraphData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def directed(self):
        """Gets the directed of this GraphData.

        Whether edges in the returned graph are directed.  # noqa: E501

        :return: The directed of this GraphData.
        :rtype: bool
        """
        return self._directed

    @directed.setter
    def directed(self, directed):
        """Sets the directed of this GraphData.

        Whether edges in the returned graph are directed.  # noqa: E501

        :param directed: The directed of this GraphData.
        :type directed: bool
        """

        self._directed = directed

    @property
    def graph(self):
        """Gets the graph of this GraphData.

        Additional graph data.  # noqa: E501

        :return: The graph of this GraphData.
        :rtype: object
        """
        return self._graph

    @graph.setter
    def graph(self, graph):
        """Sets the graph of this GraphData.

        Additional graph data.  # noqa: E501

        :param graph: The graph of this GraphData.
        :type graph: object
        """

        self._graph = graph

    @property
    def links(self):
        """Gets the links of this GraphData.

        List of edges for the graph.  # noqa: E501

        :return: The links of this GraphData.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this GraphData.

        List of edges for the graph.  # noqa: E501

        :param links: The links of this GraphData.
        :type links: List[Link]
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    @property
    def multigraph(self):
        """Gets the multigraph of this GraphData.

        Whether the graph consists of multiple subgraphs.  # noqa: E501

        :return: The multigraph of this GraphData.
        :rtype: bool
        """
        return self._multigraph

    @multigraph.setter
    def multigraph(self, multigraph):
        """Sets the multigraph of this GraphData.

        Whether the graph consists of multiple subgraphs.  # noqa: E501

        :param multigraph: The multigraph of this GraphData.
        :type multigraph: bool
        """

        self._multigraph = multigraph

    @property
    def nodes(self):
        """Gets the nodes of this GraphData.

        List of nodes for the graph.  # noqa: E501

        :return: The nodes of this GraphData.
        :rtype: List[NodeMC]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this GraphData.

        List of nodes for the graph.  # noqa: E501

        :param nodes: The nodes of this GraphData.
        :type nodes: List[NodeMC]
        """
        if nodes is None:
            raise ValueError("Invalid value for `nodes`, must not be `None`")  # noqa: E501

        self._nodes = nodes
