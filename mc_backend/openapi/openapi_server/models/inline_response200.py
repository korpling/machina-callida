# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi.openapi_server.models.base_model_ import Model
from openapi.openapi_server.models.inline_response200_frequency_analysis import InlineResponse200FrequencyAnalysis
from openapi.openapi_server.models.inline_response200_text_complexity import InlineResponse200TextComplexity
from openapi.openapi_server.models.link import Link
from openapi.openapi_server.models.node import Node
from openapi.openapi_server.models.solution import Solution
from openapi.openapi_server import util

from openapi.openapi_server.models.inline_response200_frequency_analysis import InlineResponse200FrequencyAnalysis  # noqa: E501
from openapi.openapi_server.models.inline_response200_text_complexity import InlineResponse200TextComplexity  # noqa: E501
from openapi.openapi_server.models.link import Link  # noqa: E501
from openapi.openapi_server.models.node import Node  # noqa: E501
from openapi.openapi_server.models.solution import Solution  # noqa: E501

class InlineResponse200(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, directed=None, exercise_id=None, exercise_type=None, frequency_analysis=None, graph=None, links=None, multigraph=None, nodes=None, solutions=None, text_complexity=None, uri=None):  # noqa: E501
        """InlineResponse200 - a model defined in OpenAPI

        :param directed: The directed of this InlineResponse200.  # noqa: E501
        :type directed: bool
        :param exercise_id: The exercise_id of this InlineResponse200.  # noqa: E501
        :type exercise_id: str
        :param exercise_type: The exercise_type of this InlineResponse200.  # noqa: E501
        :type exercise_type: str
        :param frequency_analysis: The frequency_analysis of this InlineResponse200.  # noqa: E501
        :type frequency_analysis: List[InlineResponse200FrequencyAnalysis]
        :param graph: The graph of this InlineResponse200.  # noqa: E501
        :type graph: object
        :param links: The links of this InlineResponse200.  # noqa: E501
        :type links: List[Link]
        :param multigraph: The multigraph of this InlineResponse200.  # noqa: E501
        :type multigraph: bool
        :param nodes: The nodes of this InlineResponse200.  # noqa: E501
        :type nodes: List[Node]
        :param solutions: The solutions of this InlineResponse200.  # noqa: E501
        :type solutions: List[Solution]
        :param text_complexity: The text_complexity of this InlineResponse200.  # noqa: E501
        :type text_complexity: InlineResponse200TextComplexity
        :param uri: The uri of this InlineResponse200.  # noqa: E501
        :type uri: str
        """
        self.openapi_types = {
            'directed': bool,
            'exercise_id': str,
            'exercise_type': str,
            'frequency_analysis': List[InlineResponse200FrequencyAnalysis],
            'graph': object,
            'links': List[Link],
            'multigraph': bool,
            'nodes': List[Node],
            'solutions': List[Solution],
            'text_complexity': InlineResponse200TextComplexity,
            'uri': str
        }

        self.attribute_map = {
            'directed': 'directed',
            'exercise_id': 'exercise_id',
            'exercise_type': 'exercise_type',
            'frequency_analysis': 'frequency_analysis',
            'graph': 'graph',
            'links': 'links',
            'multigraph': 'multigraph',
            'nodes': 'nodes',
            'solutions': 'solutions',
            'text_complexity': 'text_complexity',
            'uri': 'uri'
        }

        self._directed = directed
        self._exercise_id = exercise_id
        self._exercise_type = exercise_type
        self._frequency_analysis = frequency_analysis
        self._graph = graph
        self._links = links
        self._multigraph = multigraph
        self._nodes = nodes
        self._solutions = solutions
        self._text_complexity = text_complexity
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse200':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200 of this InlineResponse200.  # noqa: E501
        :rtype: InlineResponse200
        """
        return util.deserialize_model(dikt, cls)

    @property
    def directed(self):
        """Gets the directed of this InlineResponse200.

        Whether edges in the returned graph are directed.  # noqa: E501

        :return: The directed of this InlineResponse200.
        :rtype: bool
        """
        return self._directed

    @directed.setter
    def directed(self, directed):
        """Sets the directed of this InlineResponse200.

        Whether edges in the returned graph are directed.  # noqa: E501

        :param directed: The directed of this InlineResponse200.
        :type directed: bool
        """

        self._directed = directed

    @property
    def exercise_id(self):
        """Gets the exercise_id of this InlineResponse200.

        Unique identifier (UUID) for the exercise.  # noqa: E501

        :return: The exercise_id of this InlineResponse200.
        :rtype: str
        """
        return self._exercise_id

    @exercise_id.setter
    def exercise_id(self, exercise_id):
        """Sets the exercise_id of this InlineResponse200.

        Unique identifier (UUID) for the exercise.  # noqa: E501

        :param exercise_id: The exercise_id of this InlineResponse200.
        :type exercise_id: str
        """

        self._exercise_id = exercise_id

    @property
    def exercise_type(self):
        """Gets the exercise_type of this InlineResponse200.

        Type of exercise, concerning interaction and layout.  # noqa: E501

        :return: The exercise_type of this InlineResponse200.
        :rtype: str
        """
        return self._exercise_type

    @exercise_type.setter
    def exercise_type(self, exercise_type):
        """Sets the exercise_type of this InlineResponse200.

        Type of exercise, concerning interaction and layout.  # noqa: E501

        :param exercise_type: The exercise_type of this InlineResponse200.
        :type exercise_type: str
        """

        self._exercise_type = exercise_type

    @property
    def frequency_analysis(self):
        """Gets the frequency_analysis of this InlineResponse200.

        List of items with frequency data for linguistic phenomena.  # noqa: E501

        :return: The frequency_analysis of this InlineResponse200.
        :rtype: List[InlineResponse200FrequencyAnalysis]
        """
        return self._frequency_analysis

    @frequency_analysis.setter
    def frequency_analysis(self, frequency_analysis):
        """Sets the frequency_analysis of this InlineResponse200.

        List of items with frequency data for linguistic phenomena.  # noqa: E501

        :param frequency_analysis: The frequency_analysis of this InlineResponse200.
        :type frequency_analysis: List[InlineResponse200FrequencyAnalysis]
        """

        self._frequency_analysis = frequency_analysis

    @property
    def graph(self):
        """Gets the graph of this InlineResponse200.

        Additional graph data.  # noqa: E501

        :return: The graph of this InlineResponse200.
        :rtype: object
        """
        return self._graph

    @graph.setter
    def graph(self, graph):
        """Sets the graph of this InlineResponse200.

        Additional graph data.  # noqa: E501

        :param graph: The graph of this InlineResponse200.
        :type graph: object
        """

        self._graph = graph

    @property
    def links(self):
        """Gets the links of this InlineResponse200.

        List of edges for the graph.  # noqa: E501

        :return: The links of this InlineResponse200.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this InlineResponse200.

        List of edges for the graph.  # noqa: E501

        :param links: The links of this InlineResponse200.
        :type links: List[Link]
        """

        self._links = links

    @property
    def multigraph(self):
        """Gets the multigraph of this InlineResponse200.

        Whether the graph consists of multiple subgraphs.  # noqa: E501

        :return: The multigraph of this InlineResponse200.
        :rtype: bool
        """
        return self._multigraph

    @multigraph.setter
    def multigraph(self, multigraph):
        """Sets the multigraph of this InlineResponse200.

        Whether the graph consists of multiple subgraphs.  # noqa: E501

        :param multigraph: The multigraph of this InlineResponse200.
        :type multigraph: bool
        """

        self._multigraph = multigraph

    @property
    def nodes(self):
        """Gets the nodes of this InlineResponse200.

        List of nodes for the graph.  # noqa: E501

        :return: The nodes of this InlineResponse200.
        :rtype: List[Node]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this InlineResponse200.

        List of nodes for the graph.  # noqa: E501

        :param nodes: The nodes of this InlineResponse200.
        :type nodes: List[Node]
        """

        self._nodes = nodes

    @property
    def solutions(self):
        """Gets the solutions of this InlineResponse200.

        Correct solutions for this exercise.  # noqa: E501

        :return: The solutions of this InlineResponse200.
        :rtype: List[Solution]
        """
        return self._solutions

    @solutions.setter
    def solutions(self, solutions):
        """Sets the solutions of this InlineResponse200.

        Correct solutions for this exercise.  # noqa: E501

        :param solutions: The solutions of this InlineResponse200.
        :type solutions: List[Solution]
        """

        self._solutions = solutions

    @property
    def text_complexity(self):
        """Gets the text_complexity of this InlineResponse200.


        :return: The text_complexity of this InlineResponse200.
        :rtype: InlineResponse200TextComplexity
        """
        return self._text_complexity

    @text_complexity.setter
    def text_complexity(self, text_complexity):
        """Sets the text_complexity of this InlineResponse200.


        :param text_complexity: The text_complexity of this InlineResponse200.
        :type text_complexity: InlineResponse200TextComplexity
        """

        self._text_complexity = text_complexity

    @property
    def uri(self):
        """Gets the uri of this InlineResponse200.

        URI for accessing the exercise in this API.  # noqa: E501

        :return: The uri of this InlineResponse200.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this InlineResponse200.

        URI for accessing the exercise in this API.  # noqa: E501

        :param uri: The uri of this InlineResponse200.
        :type uri: str
        """

        self._uri = uri
