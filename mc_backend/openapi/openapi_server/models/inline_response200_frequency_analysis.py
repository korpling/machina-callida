# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi.openapi_server.models.base_model_ import Model
from openapi.openapi_server import util


class InlineResponse200FrequencyAnalysis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count=None, phenomena=None, values=None):  # noqa: E501
        """InlineResponse200FrequencyAnalysis - a model defined in OpenAPI

        :param count: The count of this InlineResponse200FrequencyAnalysis.  # noqa: E501
        :type count: int
        :param phenomena: The phenomena of this InlineResponse200FrequencyAnalysis.  # noqa: E501
        :type phenomena: List[str]
        :param values: The values of this InlineResponse200FrequencyAnalysis.  # noqa: E501
        :type values: List[str]
        """
        self.openapi_types = {
            'count': int,
            'phenomena': List[str],
            'values': List[str]
        }

        self.attribute_map = {
            'count': 'count',
            'phenomena': 'phenomena',
            'values': 'values'
        }

        self._count = count
        self._phenomena = phenomena
        self._values = values

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse200FrequencyAnalysis':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200_frequency_analysis of this InlineResponse200FrequencyAnalysis.  # noqa: E501
        :rtype: InlineResponse200FrequencyAnalysis
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this InlineResponse200FrequencyAnalysis.

        How often the given combination of values occurred.  # noqa: E501

        :return: The count of this InlineResponse200FrequencyAnalysis.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this InlineResponse200FrequencyAnalysis.

        How often the given combination of values occurred.  # noqa: E501

        :param count: The count of this InlineResponse200FrequencyAnalysis.
        :type count: int
        """

        self._count = count

    @property
    def phenomena(self):
        """Gets the phenomena of this InlineResponse200FrequencyAnalysis.

        Labels for the phenomena described in this frequency entry.  # noqa: E501

        :return: The phenomena of this InlineResponse200FrequencyAnalysis.
        :rtype: List[str]
        """
        return self._phenomena

    @phenomena.setter
    def phenomena(self, phenomena):
        """Sets the phenomena of this InlineResponse200FrequencyAnalysis.

        Labels for the phenomena described in this frequency entry.  # noqa: E501

        :param phenomena: The phenomena of this InlineResponse200FrequencyAnalysis.
        :type phenomena: List[str]
        """

        self._phenomena = phenomena

    @property
    def values(self):
        """Gets the values of this InlineResponse200FrequencyAnalysis.

        Values for the phenomena described in this frequency entry.  # noqa: E501

        :return: The values of this InlineResponse200FrequencyAnalysis.
        :rtype: List[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this InlineResponse200FrequencyAnalysis.

        Values for the phenomena described in this frequency entry.  # noqa: E501

        :param values: The values of this InlineResponse200FrequencyAnalysis.
        :type values: List[str]
        """

        self._values = values
