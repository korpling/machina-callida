# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi.openapi_server.models.base_model_ import Model
from openapi.openapi_server import util


class KwicForm(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, search_values='[]', urn=None, ctx_left=None, ctx_right=None):  # noqa: E501
        """KwicForm - a model defined in OpenAPI

        :param search_values: The search_values of this KwicForm.  # noqa: E501
        :type search_values: str
        :param urn: The urn of this KwicForm.  # noqa: E501
        :type urn: str
        :param ctx_left: The ctx_left of this KwicForm.  # noqa: E501
        :type ctx_left: int
        :param ctx_right: The ctx_right of this KwicForm.  # noqa: E501
        :type ctx_right: int
        """
        self.openapi_types = {
            'search_values': str,
            'urn': str,
            'ctx_left': int,
            'ctx_right': int
        }

        self.attribute_map = {
            'search_values': 'search_values',
            'urn': 'urn',
            'ctx_left': 'ctx_left',
            'ctx_right': 'ctx_right'
        }

        self._search_values = search_values
        self._urn = urn
        self._ctx_left = ctx_left
        self._ctx_right = ctx_right

    @classmethod
    def from_dict(cls, dikt) -> 'KwicForm':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The KwicForm of this KwicForm.  # noqa: E501
        :rtype: KwicForm
        """
        return util.deserialize_model(dikt, cls)

    @property
    def search_values(self):
        """Gets the search_values of this KwicForm.

        Search queries that were used to build the exercise.  # noqa: E501

        :return: The search_values of this KwicForm.
        :rtype: str
        """
        return self._search_values

    @search_values.setter
    def search_values(self, search_values):
        """Sets the search_values of this KwicForm.

        Search queries that were used to build the exercise.  # noqa: E501

        :param search_values: The search_values of this KwicForm.
        :type search_values: str
        """
        if search_values is None:
            raise ValueError("Invalid value for `search_values`, must not be `None`")  # noqa: E501

        self._search_values = search_values

    @property
    def urn(self):
        """Gets the urn of this KwicForm.

        CTS URN for the text passage from which the KWIC view should be generated.  # noqa: E501

        :return: The urn of this KwicForm.
        :rtype: str
        """
        return self._urn

    @urn.setter
    def urn(self, urn):
        """Sets the urn of this KwicForm.

        CTS URN for the text passage from which the KWIC view should be generated.  # noqa: E501

        :param urn: The urn of this KwicForm.
        :type urn: str
        """
        if urn is None:
            raise ValueError("Invalid value for `urn`, must not be `None`")  # noqa: E501

        self._urn = urn

    @property
    def ctx_left(self):
        """Gets the ctx_left of this KwicForm.

        Number of tokens that should be given as context on the left side of a target.  # noqa: E501

        :return: The ctx_left of this KwicForm.
        :rtype: int
        """
        return self._ctx_left

    @ctx_left.setter
    def ctx_left(self, ctx_left):
        """Sets the ctx_left of this KwicForm.

        Number of tokens that should be given as context on the left side of a target.  # noqa: E501

        :param ctx_left: The ctx_left of this KwicForm.
        :type ctx_left: int
        """
        if ctx_left is None:
            raise ValueError("Invalid value for `ctx_left`, must not be `None`")  # noqa: E501

        self._ctx_left = ctx_left

    @property
    def ctx_right(self):
        """Gets the ctx_right of this KwicForm.

        Number of tokens that should be given as context on the right side of a target.  # noqa: E501

        :return: The ctx_right of this KwicForm.
        :rtype: int
        """
        return self._ctx_right

    @ctx_right.setter
    def ctx_right(self, ctx_right):
        """Sets the ctx_right of this KwicForm.

        Number of tokens that should be given as context on the right side of a target.  # noqa: E501

        :param ctx_right: The ctx_right of this KwicForm.
        :type ctx_right: int
        """
        if ctx_right is None:
            raise ValueError("Invalid value for `ctx_right`, must not be `None`")  # noqa: E501

        self._ctx_right = ctx_right
