# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi.openapi_server.models.base_model_ import Model
from openapi.openapi_server import util


class LearningResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actor_account_name='', actor_object_type='', category_id='', category_object_type='', choices='[]', completion=None, correct_responses_pattern=None, created_time=None, duration='PT0S', extensions='{}', interaction_type='', object_definition_description=None, object_definition_type='', object_object_type='', response=None, score_max=None, score_min=None, score_raw=None, score_scaled=0, success=None, verb_display='', verb_id=''):  # noqa: E501
        """LearningResult - a model defined in OpenAPI

        :param actor_account_name: The actor_account_name of this LearningResult.  # noqa: E501
        :type actor_account_name: str
        :param actor_object_type: The actor_object_type of this LearningResult.  # noqa: E501
        :type actor_object_type: str
        :param category_id: The category_id of this LearningResult.  # noqa: E501
        :type category_id: str
        :param category_object_type: The category_object_type of this LearningResult.  # noqa: E501
        :type category_object_type: str
        :param choices: The choices of this LearningResult.  # noqa: E501
        :type choices: str
        :param completion: The completion of this LearningResult.  # noqa: E501
        :type completion: bool
        :param correct_responses_pattern: The correct_responses_pattern of this LearningResult.  # noqa: E501
        :type correct_responses_pattern: str
        :param created_time: The created_time of this LearningResult.  # noqa: E501
        :type created_time: float
        :param duration: The duration of this LearningResult.  # noqa: E501
        :type duration: str
        :param extensions: The extensions of this LearningResult.  # noqa: E501
        :type extensions: str
        :param interaction_type: The interaction_type of this LearningResult.  # noqa: E501
        :type interaction_type: str
        :param object_definition_description: The object_definition_description of this LearningResult.  # noqa: E501
        :type object_definition_description: str
        :param object_definition_type: The object_definition_type of this LearningResult.  # noqa: E501
        :type object_definition_type: str
        :param object_object_type: The object_object_type of this LearningResult.  # noqa: E501
        :type object_object_type: str
        :param response: The response of this LearningResult.  # noqa: E501
        :type response: str
        :param score_max: The score_max of this LearningResult.  # noqa: E501
        :type score_max: int
        :param score_min: The score_min of this LearningResult.  # noqa: E501
        :type score_min: int
        :param score_raw: The score_raw of this LearningResult.  # noqa: E501
        :type score_raw: int
        :param score_scaled: The score_scaled of this LearningResult.  # noqa: E501
        :type score_scaled: float
        :param success: The success of this LearningResult.  # noqa: E501
        :type success: bool
        :param verb_display: The verb_display of this LearningResult.  # noqa: E501
        :type verb_display: str
        :param verb_id: The verb_id of this LearningResult.  # noqa: E501
        :type verb_id: str
        """
        self.openapi_types = {
            'actor_account_name': str,
            'actor_object_type': str,
            'category_id': str,
            'category_object_type': str,
            'choices': str,
            'completion': bool,
            'correct_responses_pattern': str,
            'created_time': float,
            'duration': str,
            'extensions': str,
            'interaction_type': str,
            'object_definition_description': str,
            'object_definition_type': str,
            'object_object_type': str,
            'response': str,
            'score_max': int,
            'score_min': int,
            'score_raw': int,
            'score_scaled': float,
            'success': bool,
            'verb_display': str,
            'verb_id': str
        }

        self.attribute_map = {
            'actor_account_name': 'actor_account_name',
            'actor_object_type': 'actor_object_type',
            'category_id': 'category_id',
            'category_object_type': 'category_object_type',
            'choices': 'choices',
            'completion': 'completion',
            'correct_responses_pattern': 'correct_responses_pattern',
            'created_time': 'created_time',
            'duration': 'duration',
            'extensions': 'extensions',
            'interaction_type': 'interaction_type',
            'object_definition_description': 'object_definition_description',
            'object_definition_type': 'object_definition_type',
            'object_object_type': 'object_object_type',
            'response': 'response',
            'score_max': 'score_max',
            'score_min': 'score_min',
            'score_raw': 'score_raw',
            'score_scaled': 'score_scaled',
            'success': 'success',
            'verb_display': 'verb_display',
            'verb_id': 'verb_id'
        }

        self._actor_account_name = actor_account_name
        self._actor_object_type = actor_object_type
        self._category_id = category_id
        self._category_object_type = category_object_type
        self._choices = choices
        self._completion = completion
        self._correct_responses_pattern = correct_responses_pattern
        self._created_time = created_time
        self._duration = duration
        self._extensions = extensions
        self._interaction_type = interaction_type
        self._object_definition_description = object_definition_description
        self._object_definition_type = object_definition_type
        self._object_object_type = object_object_type
        self._response = response
        self._score_max = score_max
        self._score_min = score_min
        self._score_raw = score_raw
        self._score_scaled = score_scaled
        self._success = success
        self._verb_display = verb_display
        self._verb_id = verb_id

    @classmethod
    def from_dict(cls, dikt) -> 'LearningResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LearningResult of this LearningResult.  # noqa: E501
        :rtype: LearningResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actor_account_name(self):
        """Gets the actor_account_name of this LearningResult.

        H5P user ID, usually unique per device.  # noqa: E501

        :return: The actor_account_name of this LearningResult.
        :rtype: str
        """
        return self._actor_account_name

    @actor_account_name.setter
    def actor_account_name(self, actor_account_name):
        """Sets the actor_account_name of this LearningResult.

        H5P user ID, usually unique per device.  # noqa: E501

        :param actor_account_name: The actor_account_name of this LearningResult.
        :type actor_account_name: str
        """

        self._actor_account_name = actor_account_name

    @property
    def actor_object_type(self):
        """Gets the actor_object_type of this LearningResult.

        Describes the kind of object that was recognized as actor.  # noqa: E501

        :return: The actor_object_type of this LearningResult.
        :rtype: str
        """
        return self._actor_object_type

    @actor_object_type.setter
    def actor_object_type(self, actor_object_type):
        """Sets the actor_object_type of this LearningResult.

        Describes the kind of object that was recognized as actor.  # noqa: E501

        :param actor_object_type: The actor_object_type of this LearningResult.
        :type actor_object_type: str
        """

        self._actor_object_type = actor_object_type

    @property
    def category_id(self):
        """Gets the category_id of this LearningResult.

        Link to the exercise type specification.  # noqa: E501

        :return: The category_id of this LearningResult.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this LearningResult.

        Link to the exercise type specification.  # noqa: E501

        :param category_id: The category_id of this LearningResult.
        :type category_id: str
        """

        self._category_id = category_id

    @property
    def category_object_type(self):
        """Gets the category_object_type of this LearningResult.

        Describes the kind of object that was recognized as exercise.  # noqa: E501

        :return: The category_object_type of this LearningResult.
        :rtype: str
        """
        return self._category_object_type

    @category_object_type.setter
    def category_object_type(self, category_object_type):
        """Sets the category_object_type of this LearningResult.

        Describes the kind of object that was recognized as exercise.  # noqa: E501

        :param category_object_type: The category_object_type of this LearningResult.
        :type category_object_type: str
        """

        self._category_object_type = category_object_type

    @property
    def choices(self):
        """Gets the choices of this LearningResult.

        JSON string containing a list of possible choices, each with ID and description.  # noqa: E501

        :return: The choices of this LearningResult.
        :rtype: str
        """
        return self._choices

    @choices.setter
    def choices(self, choices):
        """Sets the choices of this LearningResult.

        JSON string containing a list of possible choices, each with ID and description.  # noqa: E501

        :param choices: The choices of this LearningResult.
        :type choices: str
        """

        self._choices = choices

    @property
    def completion(self):
        """Gets the completion of this LearningResult.

        Whether the exercise was fully processed or not.  # noqa: E501

        :return: The completion of this LearningResult.
        :rtype: bool
        """
        return self._completion

    @completion.setter
    def completion(self, completion):
        """Sets the completion of this LearningResult.

        Whether the exercise was fully processed or not.  # noqa: E501

        :param completion: The completion of this LearningResult.
        :type completion: bool
        """
        if completion is None:
            raise ValueError("Invalid value for `completion`, must not be `None`")  # noqa: E501

        self._completion = completion

    @property
    def correct_responses_pattern(self):
        """Gets the correct_responses_pattern of this LearningResult.

        JSON string containing a list of possible solutions to the exercise, given as patterns of answers.  # noqa: E501

        :return: The correct_responses_pattern of this LearningResult.
        :rtype: str
        """
        return self._correct_responses_pattern

    @correct_responses_pattern.setter
    def correct_responses_pattern(self, correct_responses_pattern):
        """Sets the correct_responses_pattern of this LearningResult.

        JSON string containing a list of possible solutions to the exercise, given as patterns of answers.  # noqa: E501

        :param correct_responses_pattern: The correct_responses_pattern of this LearningResult.
        :type correct_responses_pattern: str
        """
        if correct_responses_pattern is None:
            raise ValueError("Invalid value for `correct_responses_pattern`, must not be `None`")  # noqa: E501

        self._correct_responses_pattern = correct_responses_pattern

    @property
    def created_time(self):
        """Gets the created_time of this LearningResult.

        When the learner data was received (POSIX timestamp).  # noqa: E501

        :return: The created_time of this LearningResult.
        :rtype: float
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this LearningResult.

        When the learner data was received (POSIX timestamp).  # noqa: E501

        :param created_time: The created_time of this LearningResult.
        :type created_time: float
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")  # noqa: E501

        self._created_time = created_time

    @property
    def duration(self):
        """Gets the duration of this LearningResult.

        How many seconds it took a learner to complete the exercise.  # noqa: E501

        :return: The duration of this LearningResult.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this LearningResult.

        How many seconds it took a learner to complete the exercise.  # noqa: E501

        :param duration: The duration of this LearningResult.
        :type duration: str
        """

        self._duration = duration

    @property
    def extensions(self):
        """Gets the extensions of this LearningResult.

        JSON string containing a mapping of keys and values (usually the local content ID, i.e. a versioning mechanism).  # noqa: E501

        :return: The extensions of this LearningResult.
        :rtype: str
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions):
        """Sets the extensions of this LearningResult.

        JSON string containing a mapping of keys and values (usually the local content ID, i.e. a versioning mechanism).  # noqa: E501

        :param extensions: The extensions of this LearningResult.
        :type extensions: str
        """

        self._extensions = extensions

    @property
    def interaction_type(self):
        """Gets the interaction_type of this LearningResult.

        Exercise type.  # noqa: E501

        :return: The interaction_type of this LearningResult.
        :rtype: str
        """
        return self._interaction_type

    @interaction_type.setter
    def interaction_type(self, interaction_type):
        """Sets the interaction_type of this LearningResult.

        Exercise type.  # noqa: E501

        :param interaction_type: The interaction_type of this LearningResult.
        :type interaction_type: str
        """

        self._interaction_type = interaction_type

    @property
    def object_definition_description(self):
        """Gets the object_definition_description of this LearningResult.

        Exercise content, possibly including instructions.  # noqa: E501

        :return: The object_definition_description of this LearningResult.
        :rtype: str
        """
        return self._object_definition_description

    @object_definition_description.setter
    def object_definition_description(self, object_definition_description):
        """Sets the object_definition_description of this LearningResult.

        Exercise content, possibly including instructions.  # noqa: E501

        :param object_definition_description: The object_definition_description of this LearningResult.
        :type object_definition_description: str
        """
        if object_definition_description is None:
            raise ValueError("Invalid value for `object_definition_description`, must not be `None`")  # noqa: E501

        self._object_definition_description = object_definition_description

    @property
    def object_definition_type(self):
        """Gets the object_definition_type of this LearningResult.

        Type of object definition that is presented to the user.  # noqa: E501

        :return: The object_definition_type of this LearningResult.
        :rtype: str
        """
        return self._object_definition_type

    @object_definition_type.setter
    def object_definition_type(self, object_definition_type):
        """Sets the object_definition_type of this LearningResult.

        Type of object definition that is presented to the user.  # noqa: E501

        :param object_definition_type: The object_definition_type of this LearningResult.
        :type object_definition_type: str
        """

        self._object_definition_type = object_definition_type

    @property
    def object_object_type(self):
        """Gets the object_object_type of this LearningResult.

        Type of object that is presented to the user.  # noqa: E501

        :return: The object_object_type of this LearningResult.
        :rtype: str
        """
        return self._object_object_type

    @object_object_type.setter
    def object_object_type(self, object_object_type):
        """Sets the object_object_type of this LearningResult.

        Type of object that is presented to the user.  # noqa: E501

        :param object_object_type: The object_object_type of this LearningResult.
        :type object_object_type: str
        """

        self._object_object_type = object_object_type

    @property
    def response(self):
        """Gets the response of this LearningResult.

        Answer provided by the user, possibly as a pattern.  # noqa: E501

        :return: The response of this LearningResult.
        :rtype: str
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this LearningResult.

        Answer provided by the user, possibly as a pattern.  # noqa: E501

        :param response: The response of this LearningResult.
        :type response: str
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")  # noqa: E501

        self._response = response

    @property
    def score_max(self):
        """Gets the score_max of this LearningResult.

        Maximum possible score to be achieved in this exercise.  # noqa: E501

        :return: The score_max of this LearningResult.
        :rtype: int
        """
        return self._score_max

    @score_max.setter
    def score_max(self, score_max):
        """Sets the score_max of this LearningResult.

        Maximum possible score to be achieved in this exercise.  # noqa: E501

        :param score_max: The score_max of this LearningResult.
        :type score_max: int
        """
        if score_max is None:
            raise ValueError("Invalid value for `score_max`, must not be `None`")  # noqa: E501

        self._score_max = score_max

    @property
    def score_min(self):
        """Gets the score_min of this LearningResult.

        Minimum score to be achieved in this exercise.  # noqa: E501

        :return: The score_min of this LearningResult.
        :rtype: int
        """
        return self._score_min

    @score_min.setter
    def score_min(self, score_min):
        """Sets the score_min of this LearningResult.

        Minimum score to be achieved in this exercise.  # noqa: E501

        :param score_min: The score_min of this LearningResult.
        :type score_min: int
        """
        if score_min is None:
            raise ValueError("Invalid value for `score_min`, must not be `None`")  # noqa: E501

        self._score_min = score_min

    @property
    def score_raw(self):
        """Gets the score_raw of this LearningResult.

        Score that was actually achieved by the user in this exercise.  # noqa: E501

        :return: The score_raw of this LearningResult.
        :rtype: int
        """
        return self._score_raw

    @score_raw.setter
    def score_raw(self, score_raw):
        """Sets the score_raw of this LearningResult.

        Score that was actually achieved by the user in this exercise.  # noqa: E501

        :param score_raw: The score_raw of this LearningResult.
        :type score_raw: int
        """
        if score_raw is None:
            raise ValueError("Invalid value for `score_raw`, must not be `None`")  # noqa: E501

        self._score_raw = score_raw

    @property
    def score_scaled(self):
        """Gets the score_scaled of this LearningResult.

        Relative score (between 0 and 1) that was actually achieved by the user in this exercise.  # noqa: E501

        :return: The score_scaled of this LearningResult.
        :rtype: float
        """
        return self._score_scaled

    @score_scaled.setter
    def score_scaled(self, score_scaled):
        """Sets the score_scaled of this LearningResult.

        Relative score (between 0 and 1) that was actually achieved by the user in this exercise.  # noqa: E501

        :param score_scaled: The score_scaled of this LearningResult.
        :type score_scaled: float
        """

        self._score_scaled = score_scaled

    @property
    def success(self):
        """Gets the success of this LearningResult.

        Whether the exercise was successfully completed or not.  # noqa: E501

        :return: The success of this LearningResult.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this LearningResult.

        Whether the exercise was successfully completed or not.  # noqa: E501

        :param success: The success of this LearningResult.
        :type success: bool
        """
        if success is None:
            raise ValueError("Invalid value for `success`, must not be `None`")  # noqa: E501

        self._success = success

    @property
    def verb_display(self):
        """Gets the verb_display of this LearningResult.

        Type of action that was performed by the user.  # noqa: E501

        :return: The verb_display of this LearningResult.
        :rtype: str
        """
        return self._verb_display

    @verb_display.setter
    def verb_display(self, verb_display):
        """Sets the verb_display of this LearningResult.

        Type of action that was performed by the user.  # noqa: E501

        :param verb_display: The verb_display of this LearningResult.
        :type verb_display: str
        """

        self._verb_display = verb_display

    @property
    def verb_id(self):
        """Gets the verb_id of this LearningResult.

        Link to the type of action that was performed by the user.  # noqa: E501

        :return: The verb_id of this LearningResult.
        :rtype: str
        """
        return self._verb_id

    @verb_id.setter
    def verb_id(self, verb_id):
        """Sets the verb_id of this LearningResult.

        Link to the type of action that was performed by the user.  # noqa: E501

        :param verb_id: The verb_id of this LearningResult.
        :type verb_id: str
        """

        self._verb_id = verb_id
