# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi.openapi_server.models.base_model_ import Model
from openapi.openapi_server import util


class Link(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annis_component_name=None, annis_component_type=None, source=None, target=None, udep_deprel=None):  # noqa: E501
        """Link - a model defined in OpenAPI

        :param annis_component_name: The annis_component_name of this Link.  # noqa: E501
        :type annis_component_name: str
        :param annis_component_type: The annis_component_type of this Link.  # noqa: E501
        :type annis_component_type: str
        :param source: The source of this Link.  # noqa: E501
        :type source: str
        :param target: The target of this Link.  # noqa: E501
        :type target: str
        :param udep_deprel: The udep_deprel of this Link.  # noqa: E501
        :type udep_deprel: str
        """
        self.openapi_types = {
            'annis_component_name': str,
            'annis_component_type': str,
            'source': str,
            'target': str,
            'udep_deprel': str
        }

        self.attribute_map = {
            'annis_component_name': 'annis_component_name',
            'annis_component_type': 'annis_component_type',
            'source': 'source',
            'target': 'target',
            'udep_deprel': 'udep_deprel'
        }

        self._annis_component_name = annis_component_name
        self._annis_component_type = annis_component_type
        self._source = source
        self._target = target
        self._udep_deprel = udep_deprel

    @classmethod
    def from_dict(cls, dikt) -> 'Link':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Link of this Link.  # noqa: E501
        :rtype: Link
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annis_component_name(self):
        """Gets the annis_component_name of this Link.

        Component name as given by ANNIS.  # noqa: E501

        :return: The annis_component_name of this Link.
        :rtype: str
        """
        return self._annis_component_name

    @annis_component_name.setter
    def annis_component_name(self, annis_component_name):
        """Sets the annis_component_name of this Link.

        Component name as given by ANNIS.  # noqa: E501

        :param annis_component_name: The annis_component_name of this Link.
        :type annis_component_name: str
        """

        self._annis_component_name = annis_component_name

    @property
    def annis_component_type(self):
        """Gets the annis_component_type of this Link.

        Component type as given by ANNIS.  # noqa: E501

        :return: The annis_component_type of this Link.
        :rtype: str
        """
        return self._annis_component_type

    @annis_component_type.setter
    def annis_component_type(self, annis_component_type):
        """Sets the annis_component_type of this Link.

        Component type as given by ANNIS.  # noqa: E501

        :param annis_component_type: The annis_component_type of this Link.
        :type annis_component_type: str
        """

        self._annis_component_type = annis_component_type

    @property
    def source(self):
        """Gets the source of this Link.

        ID of the source node for the edge.  # noqa: E501

        :return: The source of this Link.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Link.

        ID of the source node for the edge.  # noqa: E501

        :param source: The source of this Link.
        :type source: str
        """

        self._source = source

    @property
    def target(self):
        """Gets the target of this Link.

        ID of the target node for the edge.  # noqa: E501

        :return: The target of this Link.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Link.

        ID of the target node for the edge.  # noqa: E501

        :param target: The target of this Link.
        :type target: str
        """

        self._target = target

    @property
    def udep_deprel(self):
        """Gets the udep_deprel of this Link.

        Dependency relation described by the edge.  # noqa: E501

        :return: The udep_deprel of this Link.
        :rtype: str
        """
        return self._udep_deprel

    @udep_deprel.setter
    def udep_deprel(self, udep_deprel):
        """Sets the udep_deprel of this Link.

        Dependency relation described by the edge.  # noqa: E501

        :param udep_deprel: The udep_deprel of this Link.
        :type udep_deprel: str
        """

        self._udep_deprel = udep_deprel
