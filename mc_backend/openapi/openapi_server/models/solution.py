# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi.openapi_server.models.base_model_ import Model
from openapi.openapi_server.models.solution_element import SolutionElement
from openapi.openapi_server import util

from openapi.openapi_server.models.solution_element import SolutionElement  # noqa: E501

class Solution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target=None, value=None):  # noqa: E501
        """Solution - a model defined in OpenAPI

        :param target: The target of this Solution.  # noqa: E501
        :type target: SolutionElement
        :param value: The value of this Solution.  # noqa: E501
        :type value: SolutionElement
        """
        self.openapi_types = {
            'target': SolutionElement,
            'value': SolutionElement
        }

        self.attribute_map = {
            'target': 'target',
            'value': 'value'
        }

        self._target = target
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'Solution':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Solution of this Solution.  # noqa: E501
        :rtype: Solution
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target(self):
        """Gets the target of this Solution.


        :return: The target of this Solution.
        :rtype: SolutionElement
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Solution.


        :param target: The target of this Solution.
        :type target: SolutionElement
        """

        self._target = target

    @property
    def value(self):
        """Gets the value of this Solution.


        :return: The value of this Solution.
        :rtype: SolutionElement
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Solution.


        :param value: The value of this Solution.
        :type value: SolutionElement
        """

        self._value = value
