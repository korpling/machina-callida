# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi.openapi_server.models.base_model_ import Model
from openapi.openapi_server import util


class UpdateInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_time=None, last_modified_time=None, resource_type=None):  # noqa: E501
        """UpdateInfo - a model defined in OpenAPI

        :param created_time: The created_time of this UpdateInfo.  # noqa: E501
        :type created_time: float
        :param last_modified_time: The last_modified_time of this UpdateInfo.  # noqa: E501
        :type last_modified_time: float
        :param resource_type: The resource_type of this UpdateInfo.  # noqa: E501
        :type resource_type: str
        """
        self.openapi_types = {
            'created_time': float,
            'last_modified_time': float,
            'resource_type': str
        }

        self.attribute_map = {
            'created_time': 'created_time',
            'last_modified_time': 'last_modified_time',
            'resource_type': 'resource_type'
        }

        self._created_time = created_time
        self._last_modified_time = last_modified_time
        self._resource_type = resource_type

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpdateInfo of this UpdateInfo.  # noqa: E501
        :rtype: UpdateInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_time(self):
        """Gets the created_time of this UpdateInfo.

        When the resource was created (as POSIX timestamp).  # noqa: E501

        :return: The created_time of this UpdateInfo.
        :rtype: float
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this UpdateInfo.

        When the resource was created (as POSIX timestamp).  # noqa: E501

        :param created_time: The created_time of this UpdateInfo.
        :type created_time: float
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")  # noqa: E501

        self._created_time = created_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this UpdateInfo.

        When the resource was last modified (as POSIX timestamp).  # noqa: E501

        :return: The last_modified_time of this UpdateInfo.
        :rtype: float
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this UpdateInfo.

        When the resource was last modified (as POSIX timestamp).  # noqa: E501

        :param last_modified_time: The last_modified_time of this UpdateInfo.
        :type last_modified_time: float
        """
        if last_modified_time is None:
            raise ValueError("Invalid value for `last_modified_time`, must not be `None`")  # noqa: E501

        self._last_modified_time = last_modified_time

    @property
    def resource_type(self):
        """Gets the resource_type of this UpdateInfo.

        Name of the resource for which update timestamps are indexed.  # noqa: E501

        :return: The resource_type of this UpdateInfo.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this UpdateInfo.

        Name of the resource for which update timestamps are indexed.  # noqa: E501

        :param resource_type: The resource_type of this UpdateInfo.
        :type resource_type: str
        """
        allowed_values = ["cts_data", "exercise_list", "file_api_clean"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type
