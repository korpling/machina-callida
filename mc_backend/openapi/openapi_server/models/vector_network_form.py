# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi.openapi_server.models.base_model_ import Model
from openapi.openapi_server import util


class VectorNetworkForm(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, search_regex=None, nearest_neighbor_count=0):  # noqa: E501
        """VectorNetworkForm - a model defined in OpenAPI

        :param search_regex: The search_regex of this VectorNetworkForm.  # noqa: E501
        :type search_regex: str
        :param nearest_neighbor_count: The nearest_neighbor_count of this VectorNetworkForm.  # noqa: E501
        :type nearest_neighbor_count: int
        """
        self.openapi_types = {
            'search_regex': str,
            'nearest_neighbor_count': int
        }

        self.attribute_map = {
            'search_regex': 'search_regex',
            'nearest_neighbor_count': 'nearest_neighbor_count'
        }

        self._search_regex = search_regex
        self._nearest_neighbor_count = nearest_neighbor_count

    @classmethod
    def from_dict(cls, dikt) -> 'VectorNetworkForm':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VectorNetworkForm of this VectorNetworkForm.  # noqa: E501
        :rtype: VectorNetworkForm
        """
        return util.deserialize_model(dikt, cls)

    @property
    def search_regex(self):
        """Gets the search_regex of this VectorNetworkForm.

        Regular expression for a textual search.  # noqa: E501

        :return: The search_regex of this VectorNetworkForm.
        :rtype: str
        """
        return self._search_regex

    @search_regex.setter
    def search_regex(self, search_regex):
        """Sets the search_regex of this VectorNetworkForm.

        Regular expression for a textual search.  # noqa: E501

        :param search_regex: The search_regex of this VectorNetworkForm.
        :type search_regex: str
        """
        if search_regex is None:
            raise ValueError("Invalid value for `search_regex`, must not be `None`")  # noqa: E501

        self._search_regex = search_regex

    @property
    def nearest_neighbor_count(self):
        """Gets the nearest_neighbor_count of this VectorNetworkForm.

        Number of nearest neighbors that should be considered for each target node in a graph analysis.  # noqa: E501

        :return: The nearest_neighbor_count of this VectorNetworkForm.
        :rtype: int
        """
        return self._nearest_neighbor_count

    @nearest_neighbor_count.setter
    def nearest_neighbor_count(self, nearest_neighbor_count):
        """Sets the nearest_neighbor_count of this VectorNetworkForm.

        Number of nearest neighbors that should be considered for each target node in a graph analysis.  # noqa: E501

        :param nearest_neighbor_count: The nearest_neighbor_count of this VectorNetworkForm.
        :type nearest_neighbor_count: int
        """

        self._nearest_neighbor_count = nearest_neighbor_count
